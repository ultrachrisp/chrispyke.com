#+DATE: 2018-01-03T16:42:43+02:00
#+TITLE: Ready, Set, React.
#+DRAFT: true

<img style="width:200px; height:200px; float:right;" src="../../img/react.svg" alt="React"/>
I am surprised how quickly I took to [[https://reactjs.org/][React]]. I had just completed [[https://www.coursera.org/account/accomplishments/specialization/3VS6JECTTJKS][Functional Programming in Scala]] and was itching to apply the theory, but never anticipated how naturally React (and by extension functional programming) solved many of the problems I was facing. Below are some impressions of deploying my first React application.

** So it began
   After doing some initial reading on [[https://angularjs.org/][Angular]] and [[https://vuejs.org/][Vue]], I settled on React as it aligned closest to what I was trying to do. [[https://www.udemy.com/react-redux/][Modern React with Redux]] & [[https://www.udemy.com/webpack-2-the-complete-developers-guide/][Webpack 2: The Complete Developer's Guide]] provided a sufficient foundation to build upon. I was also lucky enough to have a team member who had developed in React before who provided a number of key insights.

   With that in mind & a clear idea of what I didn't want, I started.

*** Json driven
    When your application is driven by Json, it can reinforce the separation between presentation and logic. The initial effort of structuring everything you see, as well as the logic, into Json paid-off when you could add/ remove components through edits to the Json alone. Content updates also became much easier.

    Json also provided a flexible structure so that we could make quite different applications using different combiations of components. 

*** Application vs component state
    Or phrased better, 'why not both?'

    The temptation of putting all state changes in Redux quickly became impractical, just for the performance hit. The process of reducing your logic into sections that fit into reducers helps to add focus to core changes powering your application. It then just becomes a matter of putting the logic that is left into the relevent components as theri own state. Watching the play between components before an application state changes moves 

*** Components everywhere
    
   
*** Brand new second hand

*** Debugging
